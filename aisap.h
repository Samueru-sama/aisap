/* Code generated by cmd/cgo; DO NOT EDIT. */

/* package github.com/mgord9518/aisap/cbindings */


#line 1 "cgo-builtin-export-prolog"

#include <stddef.h>

#ifndef GO_CGO_EXPORT_PROLOGUE_H
#define GO_CGO_EXPORT_PROLOGUE_H

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef struct { const char *p; ptrdiff_t n; } _GoString_;
#endif

#endif

/* Start of preamble from import "C" comments.  */


#line 7 "appimage.go"

struct aisap_AppImage {
	char* name;
	char* path;
	char* data_dir;
	char* root_dir;
	char* temp_dir;
	char* mount_dir;
	char* md5;
	char* run_id;
	unsigned int _index;  // For Go implementation as structs cannot contain Go pointers
	void*        _parent; // For Zig implemenation, points to Zig AppImage
	int ai_type;
};
struct aisap_AppImagePerms {
	int    level;
	char** files;
	char** devices;
	char** sockets;
};
typedef struct aisap_AppImage aisap_AppImage;
typedef struct aisap_AppImagePerms aisap_AppImagePerms;

#line 1 "cgo-generated-wrapper"


/* End of preamble from import "C" comments.  */


/* Start of boilerplate cgo prologue.  */
#line 1 "cgo-gcc-export-header-prolog"

#ifndef GO_CGO_PROLOGUE_H
#define GO_CGO_PROLOGUE_H

typedef signed char GoInt8;
typedef unsigned char GoUint8;
typedef short GoInt16;
typedef unsigned short GoUint16;
typedef int GoInt32;
typedef unsigned int GoUint32;
typedef long long GoInt64;
typedef unsigned long long GoUint64;
typedef GoInt64 GoInt;
typedef GoUint64 GoUint;
typedef size_t GoUintptr;
typedef float GoFloat32;
typedef double GoFloat64;
#ifdef _MSC_VER
#include <complex.h>
typedef _Fcomplex GoComplex64;
typedef _Dcomplex GoComplex128;
#else
typedef float _Complex GoComplex64;
typedef double _Complex GoComplex128;
#endif

/*
  static assertion to make sure the file is being used on architecture
  at least with matching size of GoInt.
*/
typedef char _check_for_64_bit_pointer_matching_GoInt[sizeof(void*)==64/8 ? 1:-1];

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef _GoString_ GoString;
#endif
typedef void *GoMap;
typedef void *GoChan;
typedef struct { void *t; void *v; } GoInterface;
typedef struct { void *data; GoInt len; GoInt cap; } GoSlice;

#endif

/* End of boilerplate cgo prologue.  */

#ifdef __cplusplus
extern "C" {
#endif

extern GoInt aisap_new_appimage(aisap_AppImage* cAi, char* src);

// TODO: Make char get passed correctly. This may just be easiest to just
// make another AppImage run function that accepts **char instead of Go strings
extern GoInt aisap_appimage_run(aisap_AppImage* cAi, char** args);
extern GoInt aisap_appimage_mount(aisap_AppImage* cAi);
extern void aisap_appimage_destroy(aisap_AppImage* cAi);
extern GoInt aisap_appimage_ismounted(aisap_AppImage* cAi);

extern int    aisap_appimage_type(aisap_AppImage* cAi);
extern char*  aisap_appimage_md5(aisap_AppImage* cAi);
extern char*  aisap_appimage_mountdir(aisap_AppImage* cAi);
extern char*  aisap_appimage_tempdir(aisap_AppImage* cAi);
extern char*  aisap_appimage_runid(aisap_AppImage* cAi);
extern int    aisap_appimage_sandbox(aisap_AppImage* cAi, int argc, char** args);
extern unsigned int    aisap_appimage_offset(aisap_AppImage* ai, unsigned int* off);

#ifdef __cplusplus
}
#endif
